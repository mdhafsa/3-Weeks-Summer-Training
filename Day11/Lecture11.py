#-----------------------------****Graphs****--------------------------------------
'''def graph(G,x):
    l.append(x)
    for i in G[x]:
        if(i not in l):
            graph(G,i)
G={5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8]}
l=[]
graph(G,5)
print(l)'''
#----------------------------------------------------------------

'''def graph(G,x):
    l.append(x)
    if(x==2):
        print(l)
    for i in G[x]:
        if(i not in l):
            graph(G,i)
    l.pop()
G={5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8]}
l=[]
graph(G,5)'''
#-----------------------------------------------------------------

'''def graph(G,x,c):
    l.append(x)
    if(x==2):
        print(l,c)
    for i,j in G[x]:
        if(i not in l):
            graph(G,i,c+j)       
    l.pop()
G={5:[(7,1),(3,3)],7:[(5,1),(4,3),(3,2)],4:[(7,3),(8,1),(2,2)],8:[(3,5),(4,1),(2,3)],3:[(5,3),(7,2),(8,5)],2:[(4,2),(8,3)]}
l=[]
graph(G,5,0)'''

#-----------------------------------------------------------------------
'''def graph(G,x,c):
    l.append(x)
    if(x==2):
        res.append(c)
    for i,j in G[x]:
        if(i not in l):
            graph(G,i,c+j)       
    l.pop()
G={5:[(7,1),(3,3)],7:[(5,1),(4,3),(3,2)],4:[(7,3),(8,1),(2,2)],8:[(3,5),(4,1),(2,3)],3:[(5,3),(7,2),(8,5)],2:[(4,2),(8,3)]}
l=[]
res=[]
graph(G,5,0)
print("min cost from all the paths:",min(res))'''
#----------------------------------------------------------------------------

'''def graph(G,x,c):
    l.append(x)
    if(x==2):
        res.append((c,l[:]))
    for i,j in G[x]:
        if(i not in l):
            graph(G,i,c+j)       
    l.pop()
G={5:[(7,1),(3,3)],7:[(5,1),(4,3),(3,2)],4:[(7,3),(8,1),(2,2)],8:[(3,5),(4,1),(2,3)],3:[(5,3),(7,2),(8,5)],2:[(4,2),(8,3)]}
l=[]
res=[]
graph(G,5,0)
min=10000
z=0
for i,j in res:
    if i<min:
        min=i
        z=j
print(min,z)'''

#--------------------------------------------------------------------------------------

'''def fun(d,x,e,c):
    l.append(x)
    if(x==e):
        print(c,l)
        l.pop()
        return c
    for i in d[x]:
        if i[0] not in l:
            fun(d,i[0],e,c+i[1])
    l.pop()
d={5:[(7,1),(3,3)],7:[(5,1),(4,3),(3,2)],4:[(7,3),(8,1),(2,2)],8:[(3,5),(4,1),(2,3)],3:[(5,3),(7,2),(8,5)],2:[(4,2),(8,3)]}
l=[]
print(fun(d,5,2,0))'''
#-------------------------------------------------------------------------------------------

'''def least_cost(d1,l,x,e, c,m,l1):
    l.append(x)
    if x == e:
        if c<m:
            m=c
            l1=l.copy()
        l.pop()
        return m,l1
    for i in d1[x]:
        if i[0] not in l:
            m,l1=least_cost(d1,l,i[0], e, c + i[1],m,l1)
    l.pop()
    return m,l1
d1={5:[(7,11),(3,10)],7:[(5,11),(4,12),(3,25)],4:[(7,12),(8,10),(2,13)],8:[(3,15),(4,10),(2,16)],3:[(3,10),(7,14),(8,15)],2:[(4,13),(8,16)]}
print("least cost",least_cost(d1,[],5,2,0,99999,[]))'''
#------------------------------------------------------------------------

def path(d1,l,x,e, c,m,l1):
    l.append(x)
    if x == e:
        if c<m:
            m=c
            l1=l.copy()
        l.pop()
        return m,l1
    for i in d1[x]:
        if i[0] not in l:
            m,l1=path(d1,l,i[0], e, c + i[1],m,l1)
    l.pop()
    return m,l1
d1={5:[(7,11),(3,10)],7:[(5,11),(4,12),(3,25)],4:[(7,12),(8,10),(2,13)],8:[(3,15),(4,10),(2,16)],3:[(3,10),(7,14),(8,15)],2:[(4,13),(8,16)]}
for i in d1.keys():
    print(path(d1,[],5,i,0,99999,[]))


